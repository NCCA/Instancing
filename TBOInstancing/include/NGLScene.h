#ifndef NGLSCENE_H_
#define NGLSCENE_H_
#include <ngl/Transformation.h>
#include <ngl/Text.h>
#include <QOpenGLWindow>
#include <QElapsedTimer>
#include <memory>
#include "WindowParams.h"
//----------------------------------------------------------------------------------------------------------------------
/// @file NGLScene.h
/// @brief this class inherits from the Qt OpenGLWindow and allows us to use NGL to draw OpenGL
/// @author Jonathan Macey
/// @version 1.0
/// @date 10/9/13
/// Revision History :
/// This is an initial version used for the new NGL6 / Qt 5 demos
/// @class NGLScene
/// @brief our main glwindow widget for NGL applications all drawing elements are
/// put in this file
//----------------------------------------------------------------------------------------------------------------------

class NGLScene : public QOpenGLWindow
{
  public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor for our NGL drawing class
    /// @param [in] parent the parent window to the class
    //----------------------------------------------------------------------------------------------------------------------
    NGLScene();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief dtor must close down ngl and release OpenGL resources
    //----------------------------------------------------------------------------------------------------------------------
    ~NGLScene();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the initialize class is called once when the window is created and we have a valid GL context
    /// use this to setup any default GL stuff
    //----------------------------------------------------------------------------------------------------------------------
    void initializeGL() override;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this is called everytime we want to draw the scene
    //----------------------------------------------------------------------------------------------------------------------
    void paintGL() override;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this is called everytime we resize
    //----------------------------------------------------------------------------------------------------------------------
    void resizeGL(int _w, int _h) override;

private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief update the number of instances to draw
    //----------------------------------------------------------------------------------------------------------------------
    void incInstances();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief decrease the number of instances to draw
    //----------------------------------------------------------------------------------------------------------------------
    void decInstances();

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to store the x rotation mouse value
    //----------------------------------------------------------------------------------------------------------------------
    WinParams m_win;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to store the global mouse transforms
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Mat4 m_mouseGlobalTX;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Our Camera
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Mat4 m_view;
    ngl::Mat4 m_project;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief transformation stack for the gl transformations etc
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Transformation m_transform;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the model position for mouse movement
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_modelPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief class for text rendering
    //----------------------------------------------------------------------------------------------------------------------
    std::unique_ptr<ngl::Text> m_text;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the texture ID for the box texture
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_textureName;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief polygon draw mode
    //----------------------------------------------------------------------------------------------------------------------
    GLenum m_polyMode;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to indicate is the number of instances have increased and if we need to update the point buffer
    //----------------------------------------------------------------------------------------------------------------------
    bool m_updateBuffer;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag for the fps timer
    //----------------------------------------------------------------------------------------------------------------------
    int m_fpsTimer;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the fps to draw
    //----------------------------------------------------------------------------------------------------------------------
    int m_fps;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief number of frames for the fps counter
    //----------------------------------------------------------------------------------------------------------------------
    int m_frames;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief timer for re-draw
    //----------------------------------------------------------------------------------------------------------------------
    QElapsedTimer m_timer;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief number of instances per block of the UBO in shader
    //----------------------------------------------------------------------------------------------------------------------
    GLint m_instancesPerBlock;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief pointer to the VAO for the point data
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_dataID;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief id for the Matrix data created from the transform feedback in the shader
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_matrixID;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief VAO id for our box
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_vaoID;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Texture buffer id for our box
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_tboID;

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief number of instances to draw
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_instances;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method to load transform matrices to the shader
    //----------------------------------------------------------------------------------------------------------------------
    void loadMatricesToShader();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Qt Event called when a key is pressed
    /// @param [in] _event the Qt event to query for size etc
    //----------------------------------------------------------------------------------------------------------------------
    void keyPressEvent(QKeyEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called every time a mouse is moved
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mouseMoveEvent (QMouseEvent * _event );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse button is pressed
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mousePressEvent ( QMouseEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse button is released
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void mouseReleaseEvent ( QMouseEvent *_event );

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief this method is called everytime the mouse wheel is moved
    /// inherited from QObject and overridden here.
    /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
    void wheelEvent( QWheelEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief create a cube and stuff it into a VBO on the GPU
    /// @param[in] _scale a scale factor for the unit vertices
    //----------------------------------------------------------------------------------------------------------------------
   void createCube(GLfloat _scale);
   //----------------------------------------------------------------------------------------------------------------------
   /// @brief load a texture from a QImage
   //----------------------------------------------------------------------------------------------------------------------
    void loadTexture();
    void createDataPoints();
    void timerEvent(QTimerEvent *);


};



#endif
